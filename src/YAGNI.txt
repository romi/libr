Unused legacy code. Removed from code base and squirrelled away here for reference.
/******************************************************************************/
/* JSON Expression parser */
typedef struct _sexp_t sexp_t;

struct _sexp_t {
        char *name;
        int index;
        sexp_t *next;
};

sexp_t *new_sexp(const char *name, int index)
{
        sexp_t *e = r_new(sexp_t);
        e->name = r_strdup(name);
        e->index = index;
        e->next = NULL;
        return e;
}

void delete_sexp(sexp_t *e)
{
        if (e) {
                r_free(e->name);
                r_delete(e);
        }
}

void delete_sexp_list(sexp_t *e)
{
        while (e) {
                sexp_t *n = e->next;
                delete_sexp(e);
                e = n;
        }
}

int _ischar(int c)
{
        return ((c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c == '_')
                || (c == '-'));
}

int _isdigit(int c)
{
        return (c >= '0' && c <= '9');
}

int _isdot(int c)
{
        return (c == '.') || (c == '/');
}

int _isopenbracket(int c)
{
        return (c == '[');
}

int _isclosebracket(int c)
{
        return (c == ']');
}

int _isend(int c)
{
        return (c == '\0');
}

enum {
        k_exp_char,
        k_exp_char_dot_bracket_or_end,
        k_exp_digit,
        k_exp_digit_or_bracket,
        k_exp_dot_or_end
};

sexp_t *json_parse_exp(const char *s)
{
        int state = k_exp_char;
        int index = 0;
        char buffer[128];
        int buflen = 128;
        int bufindex = 0;
        sexp_t *exp = NULL;
        sexp_t *cur = NULL;
        sexp_t *e;
        int len = strlen(s);
        int i;

        for (i = 0; i <= len; i++) {
                int c = s[i];
                switch (state) {
                case k_exp_char:
                        if (_ischar(c)) {
                                buffer[bufindex++] = c;
                                if (bufindex == buflen) {
                                        r_err("json_parse_exp: name too long (> 128)");
                                        delete_sexp_list(exp);
                                        return NULL;
                                }
                                state = k_exp_char_dot_bracket_or_end;
                        } else {
                                r_err("json_parse_exp: expected character, "
                                      "got '%c' (index %d)", c, i);
                                delete_sexp_list(exp);
                                return NULL;
                        }
                        break;

                case k_exp_char_dot_bracket_or_end:
                        if (_ischar(c)) {
                                buffer[bufindex++] = c;
                                if (bufindex == buflen) {
                                        delete_sexp_list(exp);
                                        return NULL;
                                }
                        } else if (_isdot(c)) {
                                buffer[bufindex++] = 0;
                                e = new_sexp(buffer, -1);
                                if (exp == NULL) {
                                        exp = e;
                                        cur = e;
                                } else {
                                        cur->next = e;
                                        cur = e;
                                }
                                bufindex = 0;
                                state = k_exp_char;
                        } else if (_isopenbracket(c)) {
                                buffer[bufindex++] = 0;
                                bufindex = 0;
                                index = 0;
                                state = k_exp_digit;
                        } else if (_isend(c)) {
                                buffer[bufindex++] = 0;
                                e = new_sexp(buffer, -1);
                                if (exp == NULL) {
                                        exp = e;
                                } else {
                                        cur->next = e;
                                }
                                return exp;
                        } else {
                                r_err("json_parse_exp: expected character, dot, "
                                      "bracket, or end. Got '%c' (index %d)", c, i);
                                delete_sexp_list(exp);
                                return NULL;
                        }
                        break;

                case k_exp_digit:
                        if (_isdigit(c)) {
                                index = 10 * index + (c - '0');
                                state = k_exp_digit_or_bracket;
                        } else {
                                r_err("json_parse_exp: expected digit. Got '%c' (index %d)", c, i);
                                delete_sexp_list(exp);
                                return NULL;
                        }
                        break;

                case k_exp_digit_or_bracket:
                        if (_isdigit(c)) {
                                index = 10 * index + (c - '0');
                        } else if (_isclosebracket(c)) {
                                e = new_sexp(buffer, index);
                                if (exp == NULL) {
                                        exp = e;
                                        cur = e;
                                } else {
                                        cur->next = e;
                                        cur = e;
                                }
                                bufindex = 0;
                                state = k_exp_dot_or_end;
                        } else {
                                r_err("json_parse_exp: expected digit or close bracket. Got '%c' (index %d)", c, i);
                                delete_sexp_list(exp);
                                return NULL;
                        }
                        break;

                case k_exp_dot_or_end:
                        if (_isdot(c)) {
                                state = k_exp_char;
                        } else if (_isend(c)) {
                                return exp;
                        } else {
                                r_err("json_parse_exp: expected dot or end. Got '%c' (index %d)", c, i);
                                delete_sexp_list(exp);
                                return NULL;
                        }
                        break;
                }
        }
        return NULL;
}

void json_print_exp(sexp_t *e)
{
        while (e) {
                printf("%s", e->name);
                if (e->index >= 0)
                        printf("[%d]", e->index);
                if (e->next)
                        printf(".");
                e = e->next;
        }
        printf("\n");
}
static json_object_t _eval_exp(json_object_t object, sexp_t *e)
{
        if (!json_isobject(object)) {
                r_err("json_object_get_exp: not an object");
                return json_null();
        }
        json_object_t next = json_object_get(object, e->name);
        if (e->index >= 0) {
                if (!json_isarray(next)) {
                        r_err("json_object_get_exp: not an array");
                        return json_null();
                }
                if (e->index >= json_array_length(next)) {
                        r_err("json_object_get_exp: index out of bounds");
                        return json_null();
                }
                next = json_array_get(next, e->index);
        }
        return (e->next == NULL)? next : _eval_exp(next, e->next);
}

static json_object_t json_object_get_exp(json_object_t object, const char *exp)
{
        sexp_t *e = json_parse_exp(exp);
        if (e == NULL) return json_null();
        json_object_t r = _eval_exp(object, e);
        delete_sexp_list(e);
        return r;
}

json_object_t json_object_get(json_object_t object, const char* key)
{
        if (strchr(key, '.') == NULL
            && strchr(key, '[') == NULL
            && strchr(key, '/') == NULL)
                return json_object_get_key(object, key);
        else
                return json_object_get_exp(object, key);
}

/******************************************************************************/
******************************************************************************/

typedef struct _accessor_t {
	json_object_t context;
	json_object_t variable;
} accessor_t;

json_object_t accessor_create(json_object_t context, json_object_t variable)
{
        base_t *base;
        accessor_t *accessor;

        base = base_new(k_json_accessor, sizeof(accessor_t));

        accessor = base_get(base, accessor_t);
        accessor->context = context;
        accessor->variable = variable;
        json_ref(accessor->context);
        json_ref(accessor->variable);

	return base;
}

void delete_accessor(base_t* base)
{
	accessor_t* accessor = base_get(base, accessor_t);
        json_unref(accessor->context);
        json_unref(accessor->variable);
        JSON_FREE(accessor);
}

json_object_t accessor_context(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_accessor)
		return json_null();
	accessor_t* accessor = base_get(base, accessor_t);
        return accessor->context;
}

json_object_t accessor_variable(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_accessor)
		return json_null();
	accessor_t* accessor = base_get(base, accessor_t);
        return accessor->variable;
}

/******************************************************************************/

typedef struct _array_element_t {
	json_object_t accessor;
	json_object_t index;
} array_element_t;

json_object_t array_element_create(json_object_t accessor, json_object_t index)
{
        base_t *base;
        array_element_t *array_element;

        base = base_new(k_json_array_element, sizeof(array_element_t));
	    array_element = base_get(base, array_element_t);
        array_element->accessor = accessor;
        array_element->index = index;
        json_ref(array_element->accessor);
        json_ref(array_element->index);

	return base;
}

void delete_array_element(base_t* base)
{
	    array_element_t* array_element = base_get(base, array_element_t);
        json_unref(array_element->accessor);
        json_unref(array_element->index);
        JSON_FREE(array_element);
}

json_object_t array_element_accessor(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_array_element)
		return json_null();
	array_element_t* array_element = base_get(base, array_element_t);
        return array_element->accessor;
}

json_object_t array_element_index(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_array_element)
		return json_null();
	array_element_t* array_element = base_get(base, array_element_t);
        return array_element->index;
}

/******************************************************************************/

// expression: accessor
//           | array_element

// accessor:   variable                       # "foo"
//           | expression DOT variable        # "foo.bar", "foo.bar[1].x"

// array_element: "[" number "]"              # "foo.bar[1]"
//              | expression "[" number "]"   # "foo.bar[1]"

/*

0 [var,bracketopen]     --var----------> 1 [dot,end]              + object_get
                        --bracketopen--> 2 [number]
1 [dot,end]             --dot----------> 4 [var]
                        --end----------> 6 [DONE]
2 [number]              --number-------> 5 [bracketclose]
3 [dot,bracketopen,end] --dot----------> 4 [var]
                        --bracketopen--> 2 [number]
                        --end----------> 6 [DONE]
4 [var]                 --var----------> 3 [dot,bracketopen,end] + object_get
5 [bracketclose]        --bracketclose-> 3 [dot,bracketopen,end] + array_get
6 [DONE]

*/

typedef enum _evaluator_state_t {
        evaluator_state_0,
        evaluator_state_1,
        evaluator_state_2,
        evaluator_state_3,
        evaluator_state_4,
        evaluator_state_5,
        evaluator_state_6
} evaluator_state_t;

typedef struct _evaluator_t {
        tokenizer_t* tokenizer;
        evaluator_state_t state;
} evaluator_t;

void evaluator_reset(evaluator_t* evaluator);

evaluator_t* new_evaluator(const char* s)
{
        evaluator_t* evaluator = JSON_NEW(evaluator_t);
        evaluator->tokenizer = new_tokenizer(s);
        evaluator->state = evaluator_state_0;
        return evaluator;
}

void delete_evaluator(evaluator_t* evaluator)
{
        delete_tokenizer(evaluator->tokenizer);
        JSON_FREE(evaluator);
}

json_object_t evaluator_do(evaluator_t* evaluator, json_object_t x)
{
        int token;

        while (1) {

                if (json_isnull(x))
                        return x;

                int r = tokenizer_get(evaluator->tokenizer, &token);
                if (r == k_tokenizer_error)
                        return json_null();

                if (r == k_tokenizer_endofstring) {
                        switch (evaluator->state) {
                        case evaluator_state_1:
                        case evaluator_state_3:
                                return x;
                        default:
                                return json_null();
                        }
                }

                switch (evaluator->state) {
                case evaluator_state_0:
                        if (token == k_token_variable) {
                                x = json_object_get(x, tokenizer_get_data(evaluator->tokenizer));
                                evaluator->state = evaluator_state_1;
                        } else if (token == k_token_bracketopen) {
                                evaluator->state = evaluator_state_2;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_1:
                        if (token == k_token_dot) {
                                evaluator->state = evaluator_state_4;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_2:
                        if (token == k_token_number) {
                                int index = atoi(tokenizer_get_data(evaluator->tokenizer));
                                x = json_array_get(x, index);
                                evaluator->state = evaluator_state_5;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_3:
                        if (token == k_token_dot) {
                                evaluator->state = evaluator_state_4;
                        } else if (token == k_token_bracketopen) {
                                evaluator->state = evaluator_state_2;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_4:
                        if (token == k_token_variable) {
                                x = json_object_get(x, tokenizer_get_data(evaluator->tokenizer));
                                evaluator->state = evaluator_state_1;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_5:
                        if (token == k_token_bracketclose) {
                                evaluator->state = evaluator_state_3;
                        } else {
                                return json_null();
                        }
                        break;

                case evaluator_state_6:
                        break;
                }
        }
}

json_object_t json_get(json_object_t obj, const char* expression)
{
        evaluator_t* e = new_evaluator(expression);
        json_object_t r = evaluator_do(e, obj);
        delete_evaluator(e);
        return r;
}

const char* json_getstr(json_object_t obj, const char* expression)
{
        json_object_t s = json_get(obj, expression);
        return json_string_value(s);
}

double json_getnum(json_object_t obj, const char* expression)
{
        json_object_t v = json_get(obj, expression);
        return json_number_value(v);
}

int json_streq(json_object_t obj, const char* expression, const char* value)
{
        const char* v = json_getstr(obj, expression);
        return ((v != NULL) && (strcmp(v, value) == 0));
}

/******************************************************************************/

enum {
        k_tokenizer_continue,
        k_tokenizer_newtoken,
        k_tokenizer_error,
        k_tokenizer_endofstring
};

typedef enum {
	k_tokenizer_start = 0,
	k_tokenizer_number,
	k_tokenizer_variable
} tokenizer_state_t;

typedef enum {
	k_token_dot,
	k_token_number,
	k_token_variable,
	k_token_bracketopen,
	k_token_bracketclose,
	k_token_end
} token_t;

typedef struct _tokenizer_t {
        char* s;
        int index;
	char buffer[256];
	int buflen;
	int bufindex;
	int state;
} tokenizer_t;

void tokenizer_reset(tokenizer_t* tokenizer);

tokenizer_t* new_tokenizer(const char* s)
{
        tokenizer_t* tokenizer = JSON_NEW(tokenizer_t);
        tokenizer->s = json_strdup(s);
        tokenizer->state = k_tokenizer_start;
        tokenizer->index = 0;
	tokenizer->bufindex = 0;
	tokenizer->buflen = sizeof(tokenizer->buffer);
        tokenizer_reset(tokenizer);

        return tokenizer;
}

void delete_tokenizer(tokenizer_t* tokenizer)
{
        JSON_FREE(tokenizer);
}

static int tokenizer_append(tokenizer_t* tokenizer, char c)
{
	if (tokenizer->bufindex >= tokenizer->buflen - 1) {
                return k_tokenizer_error;
        }
	tokenizer->buffer[tokenizer->bufindex++] = (char) (c & 0xff);
	return k_tokenizer_continue;
}

void tokenizer_reset(tokenizer_t* tokenizer)
{
	tokenizer->state = k_tokenizer_start;
	tokenizer->bufindex = 0;
}

static int tokenizer_getc(tokenizer_t* tokenizer)
{
        return tokenizer->s[tokenizer->index++];
}

static void tokenizer_ungetc(tokenizer_t* tokenizer)
{
        if(tokenizer->index > 0)
                tokenizer->index--;
}

static void tokenizer_reset_buffer(tokenizer_t* tokenizer)
{
	tokenizer->bufindex = 0;
}

char* tokenizer_get_data(tokenizer_t* tokenizer)
{
	tokenizer->buffer[tokenizer->bufindex] = 0;
        return tokenizer->buffer;
}

static int tokenizer_feed_number(tokenizer_t* tokenizer, int *token)
{
        int r;
        int c = tokenizer_getc(tokenizer);
        if (c == -1) {
                r = k_token_end;
                return k_tokenizer_endofstring;
        }

        if (('0' <= c) && (c <= '9')) {
		r = tokenizer_append(tokenizer, c);
        } else {
                r = tokenizer_append(tokenizer, 0);
                tokenizer_ungetc(tokenizer);
                r = k_tokenizer_newtoken;
                *token = k_token_number;
        }

	return r;
}

static inline int tokenizer_whitespace(int c)
{
	return ((c == ' ') || (c == '\r') || (c == '\n') || (c == '\t'));
}

static int tokenizer_feed_variable(tokenizer_t* tokenizer,
                                   int* token)
{
        int c = tokenizer_getc(tokenizer);
        if (c == -1)  {
                return k_tokenizer_endofstring;
        }
        if ((('a' <= c) && (c <= 'z'))
            || (('A' <= c) && (c <= 'Z'))
            || (('0' <= c) && (c <= '9'))
            || (c == '_')) {
                int r = tokenizer_append(tokenizer, c);
                if (r != k_tokenizer_continue) {
                        return r;
                }
                return k_tokenizer_continue;

        } else {
                tokenizer_ungetc(tokenizer);
                *token = k_token_variable;
                return k_tokenizer_newtoken;
        }
	return k_tokenizer_error;
}

static int tokenizer_start(tokenizer_t* tokenizer, int* token)
{
	int r = k_tokenizer_continue;

        int c = tokenizer_getc(tokenizer);
        if (c == -1)
                return k_tokenizer_endofstring;

	if (tokenizer_whitespace(c))
		return k_tokenizer_continue;

	switch (c) {
	case '[':
		*token = k_token_bracketopen;
		r = k_tokenizer_newtoken;
		break;

	case ']':
		*token = k_token_bracketclose;
		r = k_tokenizer_newtoken;
		break;

	case '.':
		*token = k_token_dot;
		r = k_tokenizer_newtoken;
		break;

	case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
		tokenizer->state = k_tokenizer_number;
                tokenizer_ungetc(tokenizer);
                r = tokenizer_feed_number(tokenizer, token);
		break;

	case '\0':
		r = k_tokenizer_endofstring;
		break;

	default:
                if ((('a' <= c) && (c <= 'z'))
                    || (('A' <= c) && (c <= 'Z'))
                    || (c == '_')) {
                        tokenizer->state = k_tokenizer_variable;
                        tokenizer_ungetc(tokenizer);
                        r = tokenizer_feed_variable(tokenizer, token);
                } else {
                        r = k_tokenizer_error;
                }
                break;
	}

	return r;
}

int tokenizer_advance(tokenizer_t* tokenizer, int* token)
{
        int r = k_tokenizer_error;

	switch (tokenizer->state) {
	case k_tokenizer_start:
                tokenizer_reset_buffer(tokenizer);
		r = tokenizer_start(tokenizer, token);
                break;

	case k_tokenizer_number:
		r = tokenizer_feed_number(tokenizer, token);
                break;

	case k_tokenizer_variable:
		r = tokenizer_feed_variable(tokenizer, token);
                break;
	}
        if (r == k_tokenizer_newtoken)
		tokenizer->state = k_tokenizer_start;

	return r;
}

int tokenizer_get(tokenizer_t* tokenizer, int* token)
{
        while (1) {
                int ret = tokenizer_advance(tokenizer, token);
                if (ret == k_tokenizer_continue)
                        continue;
                return ret;
        }
}

/******************************************************************************/

typedef struct _variable_t {
        json_object_t name;
} variable_t;

json_object_t variable_create(const char* s)
{
	base_t *base;
	variable_t *variable;

	base = base_new(k_json_variable, sizeof(variable_t));
	variable = base_get(base, variable_t);
	variable->name = json_string_create(s);

	return base;
}

void delete_variable(base_t* base)
{
	variable_t* variable = base_get(base, variable_t);
	json_unref(variable->name);
	JSON_FREE(variable);
}

const char* variable_name(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_variable)
		return NULL;
	variable_t* variable = base_get(base, variable_t);
        return json_string_value(variable->name);
}

json_object_t variable_string_name(json_object_t obj)
{
	base_t* base = (base_t*) obj;
	if (base_type(base) != k_json_variable)
		return NULL;
	variable_t* variable = base_get(base, variable_t);
        return variable->name;
}

/******************************************************************************/

